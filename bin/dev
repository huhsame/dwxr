#!/usr/bin/env node

let app = require('../app');
let path = require('path');
let debug = require('debug')('dwxr:server');
let http = require('http');
let Gun = require('gun');


app.use(Gun.serve);

let testPort = 3000;
let httpPort = 80;
let httpsPort = 443;

let port = normalizePort(process.env.PORT || testPort);
app.set('port', port); // for https server

let testServer =  http.createServer(app);

let server = testServer;
server.listen( port );

let gun = Gun({	file: 'data', web: server });

server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}


function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
