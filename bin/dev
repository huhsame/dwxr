#!/usr/bin/env node

let app = require('../app');
let debug = require('debug')('dwxr:server');
require('dotenv').config();
let http = require('http');
let Gun = require('gun');
const session = require('express-session');
const MongoStore = require('connect-mongo')(session);
const mongoose = require('mongoose');

var indexRouter = require('../routes/index');
var spacesRouter = require('../routes/spaces');
var testsRouter = require('../routes/tests');
var speedRouter = require('../routes/speed');
var apiRouter = require('../routes/api');


//database
mongoose.Promise = global.Promise;
mongoose.connect(process.env.MONGO_URI_LOCAL, { useNewUrlParser: true, keepAlive: true,useUnifiedTopology: true, keepAliveInitialDelay: 300000 })
    .then(() => {console.log('Connected ot database...')})
    .catch(err => console.error(err));

// session
app.use(session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: true,

    store: new MongoStore({
        mongooseConnection: mongoose.connection,
        ttl: 30*60 // 30 mins
    })
}));

// Routes
app.use('/', indexRouter);
app.use('/test', testsRouter);
app.use('/api', apiRouter);
app.use('/speed', speedRouter);
app.use('/space', spacesRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {

    console.log('404 createError', res);
    next(createError(404));

});

// error handler
app.use(function(err, req, res, next) {
    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};

    // render the error page
    res.status(err.status || 500);
    res.render('error');
});

app.use(Gun.serve);


let testPort = 3000;
let httpPort = 80;
let httpsPort = 443;

let port = normalizePort(process.env.PORT_LOCAL || testPort);

app.set('port', port);
let testServer =  http.createServer(app);
let server = testServer;

server.listen( port );

let gun = Gun({	file: 'data', web: server });
global.gun = gun;

server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}


function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
