<!DOCTYPE html>
<html>
<head>

    <meta charset="utf-8">
    <link rel="apple-touch-icon" sizes="57x57" href="/favicon/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/favicon/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/favicon/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/favicon/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/favicon/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/favicon/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/favicon/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/favicon/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/favicon/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192"  href="/favicon/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="/favicon/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon/favicon-16x16.png">
    <link rel="manifest" href="/favicon/manifest.json">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="/favicon/ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">

    <script src="/bundle.js" ></script>
    <link href="/bundle.css" rel="stylesheet" />
    <title>DWXR</title>
</head>
<body>

<div class="scene-container fixed-top">
    <a-scene id="scene" cursor="rayOrigin: mouse" embedded>
        <a-assets id="assets">
        </a-assets>

        <a-entity id= "light-directional" light="type: directional; color: #EEE; intensity: 0.5" position="-1 1 0"></a-entity>
        <a-entity id="light-ambient" light="type: ambient; color: #CCC"></a-entity>

        <a-entity id ='camera' position = '0 0 5' rotation="-25 0 0">
            <a-camera></a-camera>
        </a-entity>
    </a-scene>
</div>

<nav class="navbar sticky-top navbar-expand-md navbar-light bg-white justify-content-between">
    <a class="navbar-brand">
        <img id='logo'src="/images/W-1100x1100.png" width="30" height="30" class="d-inline-block align-top" alt="">
    </a>

    <ul class="navbar-nav mr-auto">
        <li class="nav-item active">
            <div id="title" class="nav-link">You cannot access this space.</div>
        </li>
    </ul>

    <div id="nav-current" class="col-auto">

    </div>

    <div id = 'nav-user'>
        <div id="sign" class="my-2 my-lg-0">
            <button id="sign-btn" class="btn btn-outline-primary my-2 my-sm-0">
                <i class="fas fa-user-circle"></i> Sign In
            </button>
        </div>
    </div>

</nav>


<!--    Modal for login-->
<div class="modal fade" id="modal-sign" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-primary">
                <h5 class="modal-title text-white" >Sign</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="alias">Username</label>
                        <input id="alias" type="text" class="form-control"  placeholder="Enter username">
                        <small id="passHelp" class="form-text text-muted">Your username needs to be longer than 5 letters.</small>
                    </div>
                    <div class="form-group">
                        <label for="pass">Passphrase</label>
                        <input id="pass" type="password" class="form-control" aria-describedby="passHelp" placeholder="Passphrase">
                        <small id="passHelp" class="form-text text-muted">Your passphrase needs to be longer than 9 letters.</small>
                    </div>
                    <button id="up" type="button" class="btn btn-outline-primary">Sign Up</button>
                    <button id="in" type="button" class="btn btn-primary">Sign In</button>
                </form>
            </div>
        </div>
    </div>
</div>





<!--가장 아래에 Modal for tell -->
<div class="modal fade" id="tell" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" >DWXR</h5>
            </div>
            <div class="modal-body" id="tell-what"></div>
        </div>
    </div>
</div>

<script>
    // navBar
    ;(() => {
        jq('.navbar-brand').attr('href', location.origin);

        jq('#title').on('click', function(){
            let input = document.createElement('input');
            input.setAttribute('value', this.textContent);
            this.replaceChild(input, this.firstChild);
            this.appendChild( input );
            input.focus();
            input.addEventListener('keyup', function(event){
                if(event.key === 'Enter' ){
                    G.space.get('title').put(this.value);
                    this.remove();
                }
            })
        });
        jq('#sign-btn').on('click', (e) => {
            let m = jq('#modal-sign');
            m.modal('show')
        });

        jq('#up').on('click', function () {
            let form = check();
            if (!form) {
                return
            }
            S.user.create(form.alias, form.pass, async (ack) => {
                if (ack.err) {
                    return S.tell(ack.err)
                }
                check.up = true;
                await S.user.auth(form.alias, form.pass, logined);
            });
        });

        jq('#in').on('click', async function () {
            let form = check();
            if (!form) {
                return
            }
            await S.user.auth(form.alias, form.pass, logined);
        });

        let check = () => {
            let form = {alias: (jq('#alias').val() || '').toLowerCase(), pass: jq("#pass").val() || ''};
            if (6 > form.alias.length) {
                S.tell("Your username needs to be longer than 5 letters.");
                return;
            }
            if (9 > form.pass.length) {
                S.tell("Your passphrase needs to be longer than 9 letters.");
                return;
            }
            return form;
        }

        let logined = (ack) => {
            if (ack.err) {
                return S.tell(ack.err)
            }
            // console.log(ack);
            jq('#modal-sign').modal('hide');
            let e = jq('#sign');
            let alias = S.user.is.alias;
            S.user.recall({sessionStorage: true}); // 세션에 로그인 정보 저장
            location.reload();
            S.tell('welcome, ' + alias + '!');
        }
    })();

    let G = {};
    let sceneEl = document.querySelector('a-scene');
    let assetsEl = document.createElement('a-assets');

    let getSpaceID = function() {
        // return path.basename(location.pathname);
        return location.pathname.substring('/space/'.length);
    }

    // callbacks of gun
    let createEl = function (data, key) {
        let el;
        // if there is no dom element, create it.
        if (document.querySelector('#' + data.id) === null) {
            el = document.createElement(data.tagName);
            if(data.tagName === 'a-asset-item'){
                el.setAttribute('src','default');
            }
            el.setAttribute('id', data.id);
            this.get('attributes').once().map().once((data, key) => {
                el.setAttribute(key, data);
            });

            if (data.parent === undefined || data.parent === null || data.parent === '' || data.parent === 'scene') {
                sceneEl.appendChild(el);
            } else {
                let parentEl = document.querySelector('#' + data.parent);
                parentEl.appendChild(el);
            }
        }
    }
    let initCurrentUser = function(data, key){
        if( data ){ // true
            this.back(2).once(function(data, key){
                console.log(data.alias);
                if(data.alias === undefined) return;
                let el = document.querySelector('#'+'nav-' + data.alias);
                if(el === null) {
                    el = document.createElement('i');
                    el.setAttribute('id', 'nav-' + data.alias);
                    el.classList.add('fas');
                    this.get(getSpaceID()).once(function(data){
                        el.classList.add('fa-' + data.animal);
                        el.classList.add('text-' + data.color);
                    });
                    document.querySelector('#nav-current').appendChild(el);
                }
            })
        } else { // exit
            this.back(2).once(function(data, key){
                if(data.alias === undefined) return;
                let el = document.querySelector('#'+'nav-' + data.alias);
                if(el !== null) {
                    this.get(getSpaceID()).get('now').once(function(data){
                        if(data) return;
                        el.remove();
                    })
                }
            })
        }
    };

    let createCurrentUser = function(data, key){
        if( data ){ // true
            this.back(2).once(function(data, key){
                console.log(data.alias);
                if(data.alias === undefined) return;
                let el = document.querySelector('#'+'nav-' + data.alias);
                if(el === null) {
                    el = document.createElement('i');
                    el.setAttribute('id', 'nav-' + data.alias);
                    el.classList.add('fas');
                    document.querySelector('#nav-current').appendChild(el);
                }
            })
        } else { // exit
            this.back(2).once(function(data, key){
                if(data.alias === undefined) return;
                let el = document.querySelector('#'+'nav-' + data.alias);
                if(el !== null) {
                    this.get(getSpaceID()).get('now').once(function(data){
                        if(data) return;
                        el.remove();
                    })
                }
            })
        }
    };

    let animalCurrentUser = function(data, key){
        let animal = data;
        if(animal === false) return;
        this.back(2).once(function(data, key){
                if(data.alias === undefined) return;
                let el = document.querySelector('#'+'nav-' + data.alias);
                if(el === null) {
                    el = document.createElement('i');
                    el.setAttribute('id', 'nav-' + data.alias);
                    el.classList.add('fas');
                }
                el.classList.add('fa-' + animal);
        })
    }
    let colorCurrentUser = function(data, key){
        let color = data;
        if(color === false) return;
        this.back(2).once(function(data, key){
                if (data.alias === undefined) return;
                let el = document.querySelector('#' + 'nav-' + data.alias);
                if (el === null) {
                    el = document.createElement('i');
                    el.setAttribute('id', 'nav-' + data.alias);
                    el.classList.add('fas');
                }
                el.classList.add('text-' + color);
        })
    }



    // Initialize space


    function testJsonToGun(){

        let obj = {
            id: 'gift2',
            tagName: 'a-box',
            parent: 'scene',
            attributes:{
                position: {x:1, y:2, z:-3},
                rotation: {x:0, y:45, z:45},
                scale: {x:1, y:1, z:1},
                color: 'blue',
                'transform-controls' : { activated: false },
            }
        };

        // <a-box id='gift' position="x:0; y:0; z:0" rotation="x:0; y:45; z:45" scale="x:1; y:1; z:1" color=red" transform-controls={activated: false}>

        G.objects.get( obj.id ).put(obj);
        G.scene.get('children').set( G.objects.get( obj.id ) );
    }

    let I = function(){

            let initPath = function(){
                G.space = S.app.get('spaces').get( getSpaceID() );
                G.scene = G.space.get('scene');
                G.assets = G.space.get('assets');
                G.objects = G.space.get('objects');
            }

            let joinSpace = function(){
                console.log(S.myAlias + ' wanna join here!')

                G.space.get('participants').set( S.myData );
                G.space.get('participants').once().map().once( function(data, key){
                    console.log(S.myAlias);
                    if(key === '~' + S.myPair.pub){
                        let animals = ['paw', 'hippo', 'dog', 'spider', 'kiwi-bird',
                            'frog', 'fish', 'dragon', 'dove', 'cat'];
                        let colors = ['blue', 'indigo', 'purple', 'pink', 'red',
                            'orange', 'yellow', 'green', 'teal', 'cyan'];
                        this.get(getSpaceID()).get('now').put(true);
                        this.get(getSpaceID()).put({
                            'animal': animals[Math.floor(Math.random() * animals.length)],
                            'color': colors[Math.floor(Math.random() * colors.length)],
                        });
                        G.me = this;
                    }
                });
            }

            let initCurrentParticipants = function () {
                G.space.get('participants').once().map().get(getSpaceID()).get('color').once(initCurrentUser);
            }

            let initTitle = function(){
                let t = jq('#title');
                G.space.once(function(data, key){
                    t.text(data.title);
                })
            }

            let initAssets= function(){
                G.assets.map().once( createEl );
            }

            let initObjects = function(){
                G.scene.get('children').once().map().once( initChildren );
            }

            // recursive
            let initChildren = function(data, key){
                this.once( createEl );
                if(data.children !== undefined){
                    this.get('children').once().map().once( initChildren )
                }
            };

            initPath();
            joinSpace();
            initCurrentParticipants();
            initTitle();
            initAssets();
            initObjects();
            subscribe();
        }


    let subscribe = function(){
        G.space.get('title').on( function(data){
            jq('#title').text(data);
        })

        G.space.get('participants').map().get(getSpaceID()).get('now').on( createCurrentUser );
        G.space.get('participants').map().get(getSpaceID()).get('animal').on( animalCurrentUser );
        G.space.get('participants').map().get(getSpaceID()).get('color').on( colorCurrentUser );

        let syncPosition = function ( data, key ){
            let el = document.querySelector('#'+key);
            if(el){
                let object = el.object3D;
                if( object !== undefined ) {
                    this.get('attributes').get('position').once(function (data) {
                        // console.log(data);
                        if(data !== undefined){
                            object.position.copy(data);
                        }
                    });
                }
            }
        }

        G.objects.map().get('attributes').get('position').on(function(data, key){
            this.back(2).once( syncPosition )
        });

    };

    // when user leaves this space, remove the user in participants list
    ;(()=>{
        document.addEventListener('sslogin', I)
        S.spaceoff = new Event('spaceoff');
        window.addEventListener('spaceoff', function(){
            G.me.get(getSpaceID()).get('now').put(false);
            G.me.get(getSpaceID()).get('animal').put(false);
            G.me.get(getSpaceID()).get('color').put(false);

        })
        window.onbeforeunload = function(e){
            window.dispatchEvent(S.spaceoff);
        }
    })();

</script>
</body>
</html>



